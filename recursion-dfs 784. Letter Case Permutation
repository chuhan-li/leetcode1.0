/***
Given a string S, we can transform every letter individually to be lowercase or uppercase to create another string.

Return a list of all possible strings we could create. You can return the output in any order.

Example 1:

Input: S = "a1b2"
Output: ["a1b2","a1B2","A1b2","A1B2"]
Example 2:

Input: S = "3z4"
Output: ["3z4","3Z4"]
Example 3:

Input: S = "12345"
Output: ["12345"]
Example 4:

Input: S = "0"
Output: ["0"]

Constraints:

S will be a string with length between 1 and 12.
S will consist only of letters or digits.
***/

class Solution {
  public List<String> letterCasePermutation(String S) {
    List<String> res = new ArrayList<>();
    dfs(res, S.toCharArray(), 0);
    return res;
  }
  
  public void dfs(List<String> res, char[] chars, int idx) {
    if (idx == chars.length) {
      res.add(new String(chars));
      return;
    }
    
    char c = chars[idx];
    if (Character.isDigit(c)) {
      dfs(res, chars, idx + 1);
    } else {
      chars[idx] = Character.toUpperCase(c);
      dfs(res, chars, idx + 1);
      
      chars[idx] = Character.toLowerCase(c);
      dfs(res, chars, idx + 1);
    }
  }
}

