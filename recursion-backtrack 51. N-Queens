/**
The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.

Given an integer n, return all distinct solutions to the n-queens puzzle.

Each solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space, respectively.


Example 1:

Input: n = 4
Output: [[".Q..","...Q","Q...","..Q."],["..Q.","Q...","...Q",".Q.."]]
Explanation: There exist two distinct solutions to the 4-queens puzzle as shown above
Example 2:

Input: n = 1
Output: [["Q"]]
 

Constraints:

1 <= n <= 9
**/

class Solution {
  public List<List<String>> solveNQueens(int n) {
    List<List<String>> res = new ArrayList<>();
    char[][] board = new char[n][n];
    for (int i = 0; i < n; i++) {
      for (int j = 0; j < n; j++) {
        board[i][j] = '.';
      }
    }
    backtrack(board, 0, res);
    return res;
  }
  
  public void backtrack(char[][] board, int rowIdx, List<List<String>> res) {
    if (rowIdx == board.length) {
      res.add(construct(board));
      return;
    }
    
    for (int i = 0; i < board.length; i++) {
      if (isValid(board, rowIdx, i)) {
        board[rowIdx][i] = 'Q';
        backtrack(board, rowIdx + 1, res);
        board[rowIdx][i] = '.';
      }
    }
  }
  
  public List<String> construct(char[][] board) {
    List<String> ret = new ArrayList<>();
    for (int i = 0; i < board.length; i++) {
      ret.add(new String(board[i]));
    }
    return ret;
  }
  
  public boolean isValid(char[][] board, int rowIdx, int colIdx) {
    for (int i = 0; i < rowIdx; i++) {
      for (int j = 0; j < board.length; j++) {
        if (board[i][j] == 'Q' && (rowIdx + colIdx == i + j || colIdx == j || rowIdx + j == colIdx + i)) {
          return false;
        }
      }
    }
    return true;
  }
}
