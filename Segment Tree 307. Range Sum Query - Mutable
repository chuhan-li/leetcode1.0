/**
Given an array nums and two types of queries where you should update the value of an index in the array, and retrieve the sum of a range in the array.

Implement the NumArray class:

NumArray(int[] nums) initializes the object with the integer array nums.
void update(int index, int val) updates the value of nums[index] to be val.
int sumRange(int left, int right) returns the sum of the subarray nums[left, right] (i.e., nums[left] + nums[left + 1], ..., nums[right]).
 

Example 1:

Input
["NumArray", "sumRange", "update", "sumRange"]
[[[1, 3, 5]], [0, 2], [1, 2], [0, 2]]
Output
[null, 9, null, 8]

Explanation
NumArray numArray = new NumArray([1, 3, 5]);
numArray.sumRange(0, 2); // return 9 = sum([1,3,5])
numArray.update(1, 2);   // nums = [1,2,5]
numArray.sumRange(0, 2); // return 8 = sum([1,2,5])
 

Constraints:

1 <= nums.length <= 3 * 104
-100 <= nums[i] <= 100
0 <= index < nums.length
-100 <= val <= 100
0 <= left <= right < nums.length
At most 3 * 104 calls will be made to update and sumRange.
**/


class NumArray {
    
    class SegmentTreeNode {
        int start, end;
        int sum;
        SegmentTreeNode left, right;
        
        public SegmentTreeNode(int start, int end) {
            this.start = start;
            this.end = end;
            this.sum = 0;
            this.left = null;
            this.right = null;
        }
    }
    
    SegmentTreeNode root;

    public NumArray(int[] nums) {
        root = buildTree(nums, 0, nums.length - 1);
    }
    
    public SegmentTreeNode buildTree(int[] nums, int start, int end) {
        if (start > end) return null;
        SegmentTreeNode node = new SegmentTreeNode(start, end);
        if (start == end) node.sum = nums[start];
        else {
            node.left = buildTree(nums, start, start + (end - start) / 2);
            node.right = buildTree(nums, start + (end - start) / 2 + 1, end);
            node.sum = node.left.sum + node.right.sum;
        }
        return node;
    }
    
    public void update(int index, int val) {
        updateHelper(root, index, val);
    }
    
    public void updateHelper(SegmentTreeNode root, int idx, int val) {
        if (root.start == root.end) root.sum = val;
        else {
            int mid = root.start + (root.end - root.start) / 2;
            if (idx <= mid) updateHelper(root.left, idx, val);
            else updateHelper(root.right, idx, val);
            root.sum = root.left.sum + root.right.sum;
        }
    }
    
    public int sumRange(int left, int right) {
        return sumRangeHelper(root, left, right);
    }
    
    public int sumRangeHelper(SegmentTreeNode root, int start, int end) {
        if (root.start == start && root.end == end) return root.sum;
        int mid = root.start + (root.end - root.start) / 2;
        if (start <= mid && end <= mid) return sumRangeHelper(root.left, start, end);
        else if (start > mid && end > mid) return sumRangeHelper(root.right, start, end);
        else return sumRangeHelper(root.left, start, mid) + sumRangeHelper(root.right, mid + 1, end);
    }
}

