/***
Implement a trie with insert, search, and startsWith methods.

Example:

Trie trie = new Trie();

trie.insert("apple");
trie.search("apple");   // returns true
trie.search("app");     // returns false
trie.startsWith("app"); // returns true
trie.insert("app");   
trie.search("app");     // returns true
Note:

You may assume that all inputs are consist of lowercase letters a-z.
All inputs are guaranteed to be non-empty strings.
***/


class Trie {
  
  class TrieNode {
    public boolean isEnd;
    public TrieNode[] children;

    public TrieNode() {
      isEnd = false;
      children = new TrieNode[26];
    }
  }

  private TrieNode root;

  /** Initialize your data structure here. */
  public Trie() {
    root = new TrieNode();
  }

  /** Inserts a word into the trie. */
  public void insert(String word) {
    TrieNode cur = root;
    for (char c : word.toCharArray()) {
      int idx = (int) (c - 'a');
      if (cur.children[idx] == null) cur.children[idx] = new TrieNode();
      cur = cur.children[idx];
    }
    cur.isEnd = true;
    return;
  }

  /** Returns if the word is in the trie. */
  public boolean search(String word) {
    TrieNode endNode = searchPrefix(word);
    return (endNode != null) && (endNode.isEnd);

  }

  /** Returns if there is any word in the trie that starts with the given prefix. */
  public boolean startsWith(String prefix) {
    TrieNode endNode = searchPrefix(prefix);
    return (endNode != null);
  }
  
  public TrieNode searchPrefix(String prefix) {
    TrieNode cur = root;
    for (char c : prefix.toCharArray()) {
      int idx = (int) (c - 'a');
      if (cur.children[idx] == null) return null;
      cur = cur.children[idx];
    }
    return cur;
  } 
}
