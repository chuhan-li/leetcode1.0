/**
Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.

Example 1:

Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].
Example 2:

Input: intervals = [[1,4],[4,5]]
Output: [[1,5]]
Explanation: Intervals [1,4] and [4,5] are considered overlapping.
 

Constraints:

1 <= intervals.length <= 104
intervals[i].length == 2
0 <= starti <= endi <= 104
**/

class Solution {
  public int[][] merge(int[][] intervals) {
    List<int[]> res = new ArrayList<>();
    Map<Integer, Integer> map = new TreeMap<>();
    for (int[] pair : intervals) {
      map.put(pair[0], map.getOrDefault(pair[0], 0) + 1);
      map.put(pair[1], map.getOrDefault(pair[1], 0) - 1);
    }
    
    int tmp = 0, start = 0;
    for (int key : map.keySet()) {
      if (tmp == 0) start = key;
      tmp += map.get(key);
      if (tmp == 0) res.add(new int[]{start, key});
    }
    return res.toArray(new int[res.size()][]);
  }
}
