/***
Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.

 

Example 1:

Input: n = 3
Output: ["((()))","(()())","(())()","()(())","()()()"]
Example 2:

Input: n = 1
Output: ["()"]
 

Constraints:

1 <= n <= 8
*/


class Solution {
  public List<String> generateParenthesis(int n) {
    List<String> res = new ArrayList<>();
    if (n == 0) return res;
    
    backtrack(n, n, new StringBuilder(), res);
    return res;
  }
  
  public void backtrack(int l, int r, StringBuilder sb, List<String> res) {
    if (l == 0 && r == 0) res.add(sb.toString());
    if (l > r) return;
    if (l > 0) {
      backtrack(l - 1, r, sb.append("("), res);
      sb.deleteCharAt(sb.length() - 1);
    }
    if (r > 0) {
      backtrack(l, r - 1, sb.append(")"), res);
      sb.deleteCharAt(sb.length() - 1);
    }
  }
}

// Notes:
// s2 + s1 - O(m+n)
// sb.append() - O(1)
