/**
One way to serialize a binary tree is to use preorder traversal. When we encounter a non-null node, we record the node's value. If it is a null node, we record using a sentinel value such as '#'.


For example, the above binary tree can be serialized to the string "9,3,4,#,#,1,#,#,2,#,6,#,#", where '#' represents a null node.

Given a string of comma-separated values preorder, return true if it is a correct preorder traversal serialization of a binary tree.

It is guaranteed that each comma-separated value in the string must be either an integer or a character '#' representing null pointer.

You may assume that the input format is always valid.

For example, it could never contain two consecutive commas, such as "1,,3".
 

Example 1:

Input: preorder = "9,3,4,#,#,1,#,#,2,#,6,#,#"
Output: true
Example 2:

Input: preorder = "1,#"
Output: false
Example 3:

Input: preorder = "9,#,#,1"
Output: false
 

Constraints:

1 <= preorder.length <= 104
preoder consist of integers in the range [0, 100] and '#' separated by commas ','.
**/

class Solution {
  public boolean isValidSerialization(String preorder) {
    Stack<String> st = new Stack<>();
    String[] strs = preorder.split(",");
    for (int i = 0; i < strs.length; i++) {
      while (strs[i].equals("#") && !st.isEmpty() && st.peek().equals("#")) {
        st.pop();
        if (st.isEmpty()) return false;
        st.pop();
      }
      st.push(strs[i]);
    }
    return st.size() == 1 && st.peek().equals("#"); 
  }
}


这个方法简单的说就是不断的砍掉叶子节点。最后看看能不能全部砍掉。

已例子一为例，："9,3,4,#,#,1,#,#,2,#,6,#,#" 遇到x # #的时候，就把它变为 #

我模拟一遍过程：

9,3,4,#,# => 9,3,# 继续读
9,3,#,1,#,# => 9,3,#,# => 9,# 继续读
9,#2,#,6,#,# => 9,#,2,#,# => 9,#,# => #
合法的情况最后一定是一个#，python代码如下:

