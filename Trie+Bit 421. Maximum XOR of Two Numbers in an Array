/***
Given an integer array nums, return the maximum result of nums[i] XOR nums[j], where 0 ≤ i ≤ j < n.

Follow up: Could you do this in O(n) runtime?

Example 1:

Input: nums = [3,10,5,25,2,8]
Output: 28
Explanation: The maximum result is 5 XOR 25 = 28.
Example 2:

Input: nums = [0]
Output: 0
Example 3:

Input: nums = [2,4]
Output: 6
Example 4:

Input: nums = [8,10,2]
Output: 10
Example 5:

Input: nums = [14,70,53,83,49,91,36,80,92,51,66,70]
Output: 127
 

Constraints:

1 <= nums.length <= 2 * 104
0 <= nums[i] <= 231 - 1
***/

class Solution {
    class TrieNode {
      TrieNode[] children;
      int val;
      
      public TrieNode() {
        val = -1;
        children = new TrieNode[2];
      }
    }
    
    public TrieNode root = new TrieNode();
    
    public void addNum(int num) {
      TrieNode cur = root;
      for (int i = 30; i > -1; i--) {
        int curBit = (num >> i) & 1;
        if (cur.children[curBit] == null) cur.children[curBit] = new TrieNode();
        cur = cur.children[curBit];
        cur.val = curBit;
      }
      cur.val = num;
    }
    
    public int searchMax(int num) {
      int res = 0;
      TrieNode cur = root;
      for (int i = 30; i > -1; i--) {
        int curBit = (num >> i) & 1;
        if (cur.children[curBit ^ 1] == null) cur = cur.children[curBit];
        else {
          cur = cur.children[curBit ^ 1];
          res |= (1 << i);
        }
      }
      return res;
    }
    
    public int findMaximumXOR(int[] nums) {
      for (int num : nums) {
        addNum(num);
      }
      
      int res = 0;
      for (int num : nums) {
        res = Math.max(res, searchMax(num));
      }
      return res; 
    }
}

/***
Note:
 - 0 xor 1 = 1 xor 0 = 1; 0 xor 0 = 1 xor 1 = 0;
 
 - A good solution with explanation - https://ithelp.ithome.com.tw/articles/10239361?sc=rss.iron
***/
