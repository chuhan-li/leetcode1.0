/**
Given a non-empty array nums containing only positive integers, find if the array can be partitioned into two subsets such that the sum of elements in both subsets is equal.

Example 1:

Input: nums = [1,5,11,5]
Output: true
Explanation: The array can be partitioned as [1, 5, 5] and [11].
Example 2:

Input: nums = [1,2,3,5]
Output: false
Explanation: The array cannot be partitioned into equal sum subsets.
 

Constraints:

1 <= nums.length <= 200
1 <= nums[i] <= 100
**/


// dp[i][j] - whether the specific sum j can be gotten from the first i numbers
// dp[i][j] = dp[i - 1][j] || dp[i - 1][j - nums[i]]
class Solution {
    public boolean canPartition(int[] nums) {
        int sum = 0;
        for (int num : nums) sum += num;
        if (sum % 2 != 0) return false;
        
        int target = sum / 2;
        boolean dp[][] = new boolean[nums.length + 1][target + 1];
        
        dp[0][0] = true;
        for (int i = 1; i <= nums.length; i++) dp[i][0] = true;
        for (int j = 1; j <= target; j++) dp[0][j] = false;
        
        for (int i = 1; i <= nums.length; i++) {
            for (int j = 1; j <= target; j++) {
                dp[i][j] = dp[i - 1][j];
                if (j >= nums[i - 1]) dp[i][j] = dp[i][j] || dp[i - 1][j - nums[i - 1]];
            }
        }
        return dp[nums.length][target];
    }
}

