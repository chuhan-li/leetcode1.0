/***
Given a string s, partition s such that every substring of the partition is a palindrome. Return all possible palindrome partitioning of s.

A palindrome string is a string that reads the same backward as forward.

 

Example 1:

Input: s = "aab"
Output: [["a","a","b"],["aa","b"]]
Example 2:

Input: s = "a"
Output: [["a"]]
 

Constraints:

1 <= s.length <= 16
s contains only lowercase English letters.
***/

class Solution {
  public List<List<String>> partition(String s) {
    List<List<String>> res = new ArrayList<>();
    backtrack(s, res, new ArrayList<>(), 0);
    return res;
  }
  
  public void backtrack(String s, List<List<String>> res, List<String> tmp, int idx) {
    // base case
    if (idx == s.length()) res.add(new ArrayList<>(tmp));
    
    // recursion
    for (int i = idx; i < s.length(); i++) {
      //judgement
      if (isPalindrome(s, idx, i)) {
        tmp.add(s.substring(idx, i + 1));
        backtrack(s, res, tmp, i + 1);
        tmp.remove(tmp.size() - 1);
      }
    }
  }
  
  public boolean isPalindrome(String s, int start, int end) {
    while (start < end) {
      if (s.charAt(start++) != s.charAt(end--)) return false;   
    }
    return true;
  }
}

/*
Array like nums = int[] -> nums.length | nums[idx]
String s, StringBuilder sb -> s.length() | sb.charAt(idx)
List<> -> .size()
*/
