Given an array of integers nums and an integer target.

Return the number of non-empty subsequences of nums such that the sum of the minimum and maximum element on it is less or equal to target. Since the answer may be too large, return it modulo 109 + 7.

 

Example 1:

Input: nums = [3,5,6,7], target = 9
Output: 4
Explanation: There are 4 subsequences that satisfy the condition.
[3] -> Min value + max value <= target (3 + 3 <= 9)
[3,5] -> (3 + 5 <= 9)
[3,5,6] -> (3 + 6 <= 9)
[3,6] -> (3 + 6 <= 9)
Example 2:

Input: nums = [3,3,6,8], target = 10
Output: 6
Explanation: There are 6 subsequences that satisfy the condition. (nums can have repeated numbers).
[3] , [3] , [3,3], [3,6] , [3,6] , [3,3,6]
Example 3:

Input: nums = [2,3,3,4,6,7], target = 12
Output: 61
Explanation: There are 63 non-empty subsequences, two of them don't satisfy the condition ([6,7], [7]).
Number of valid subsequences (63 - 2 = 61).
Example 4:

Input: nums = [5,2,4,1,7,6,8], target = 16
Output: 127
Explanation: All non-empty subset satisfy the condition (2^7 - 1) = 127
 

Constraints:

1 <= nums.length <= 105
1 <= nums[i] <= 106
1 <= target <= 106
***/

/* Tips
** about modulo 10^9+7 : https://www.geeksforgeeks.org/modulo-1097-1000000007/
** total subsequence = 2^(n-1) + 2^(n-2) + ... + 2^0 eg.[3,5,6,7] - 3with(2*2*2choices) + 5with(2*2choices) + 6with(2choices) + 7
*/

class Solution {
  public int numSubseq(int[] nums, int target) {
    Arrays.sort(nums);
    int res = 0, mod = (int)1e9 + 7;
    int[] pows = new int[nums.length];
    pows[0] = 1;
    for (int i = 1; i < nums.length; i++) {
      pows[i] = pows[i - 1] * 2 % mod;
    }
    
    int l = 0, r = nums.length - 1;
    while (l <= r) {
      if (nums[l] + nums[r] > target) r--;
      else {
        res = (res + pows[r - l]) % mod;
        l++;
      }
    }
    return res;
  }
}

/** Explanation
// 1,2,3,4,5  Target- 4

// In this case we can only satisfy the condition of ***min+max*** <= target until element 3 so element(4 and 5) does not matter here.
// so we are concerned with only elements from 1 to 3. Below is the dry run

// i=0,j=2   ***consider element 1 as part of subsequence(1 as min element since we need non empty subsequence) (all subsets of (2,3))*** = 2^2 = 4  (1,12,13,123)
// i=1,j=2  here element 2+3 > target(condition failed so we reduce the windows where min+max is less than target so j=1 (23 is not possible since 2+3=5 > target)
// i=1,j=1 ***consider element 2 as part of subsequence(2 as min element since we need non empty subsequence)(all subsets of())*** = 2^0 = 1 (2)

// So the result in this case is 5
**/

