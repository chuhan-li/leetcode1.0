/***

https://www.youtube.com/watch?v=BTObFnHbD4U


Given a collection of intervals, find the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping.

Example 1:

Input: [[1,2],[2,3],[3,4],[1,3]]
Output: 1
Explanation: [1,3] can be removed and the rest of intervals are non-overlapping.
Example 2:

Input: [[1,2],[1,2],[1,2]]
Output: 2
Explanation: You need to remove two [1,2] to make the rest of intervals non-overlapping.
Example 3:

Input: [[1,2],[2,3]]
Output: 0
Explanation: You don't need to remove any of the intervals since they're already non-overlapping.
 

Note:

You may assume the interval's end point is always bigger than its start point.
Intervals like [1,2] and [2,3] have borders "touching" but they don't overlap each other.

***/

class Solution {
    public int eraseOverlapIntervals(int[][] intervals) {
        if (intervals.length < 2) return 0;
        Arrays.sort(intervals, (a, b) -> a[0] - b[0]);
        
        int count = 0;
        int l = 0, r = 1;
        
        while(r < intervals.length) {
          if (intervals[l][1] <= intervals[r][0]) {  // non-overlapping case
            l = r;
            r++;
          } else if (intervals[l][1] <= intervals[r][1]) {  // overlapping case1: remove right. eg:[1,3] & [2,4]
            count++;
            r++;
          } else if (intervals[l][1] > intervals[r][1]) {  // overlapping case2: remove left. eg:[1,4] & [2,3]
            l = r;
            r++;
            count++;
          }
        }
        return count;
    }
}
