/*
Suppose you have n integers labeled 1 through n. A permutation of those n integers perm (1-indexed) is considered a beautiful arrangement if for every i (1 <= i <= n), either of the following is true:

perm[i] is divisible by i.
i is divisible by perm[i].
Given an integer n, return the number of the beautiful arrangements that you can construct.

 

Example 1:

Input: n = 2
Output: 2
Explanation: 
The first beautiful arrangement is [1,2]:
    - perm[1] = 1 is divisible by i = 1
    - perm[2] = 2 is divisible by i = 2
The second beautiful arrangement is [2,1]:
    - perm[1] = 2 is divisible by i = 1
    - i = 2 is divisible by perm[2] = 1
Example 2:

Input: n = 1
Output: 1
 

Constraints:

1 <= n <= 15
*/

class Solution {
  int count = 0;
  public int countArrangement(int n) {
    int[] perm = new int[n + 1]; // [0,0,..0] n+1
    for (int i = 0; i < perm.length; i++) {
      perm[i] = i;
    }
    
    backtrack(1, perm);
    return count;
  }
  
  private void backtrack(int idx, int[] perm) {
    // base case
    if (idx == perm.length) count++;
    
    // recursion
    for (int i = idx; i < perm.length; i++) {
      swap(i, idx, perm);
      if ((perm[idx] % idx == 0) || (idx % perm[idx] == 0)) {
        backtrack(idx + 1, perm);
      }
      swap(i, idx, perm);
    }
  }
  
  private void swap(int i, int j, int[] nums) {
    int tmp = nums[i];
    nums[i] = nums[j];
    nums[j] = tmp;
  }
}

/*
Notes:
15 is divisible by 3
dividend / divisor = quotient ... remainder
*/
  
  
  
  
  
  
